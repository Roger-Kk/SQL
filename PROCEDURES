/*PROCEDURES*/

/*Conceito: */
DELIMITER //
CREATE PROCEDURES `nome_procedure`()
BEGIN
DECLARE declaration_statement
...
executable_statement
...
END //
DELIMITER;


/*Exemplos: */
DELIMITER //
CREATE PROCEDURE  `ola_mundo`()
BEGIN
SELECT 'Olá Mundo!'//
END //
DELIMITER;

/*Para chamar a Procedure: */
CALL ola_mundo;

DELIMITER //
CREATE PROCEDURE  `mostra_num_alias`()
BEGIN
SELECT (1 + 9) - 5 AS RESULTADO //
END //
DELIMITER;

CALL  mostra_num_alias;


DELIMITER //
CREATE PROCEDURE  `sp_com_funcoes`()
BEGIN
SELECT CONCAT('Olá Mundo!', '...', (1+9)-5) AS ITENS_COMBINADOS//
END //
DELIMITER;

CALL  sp_com_funcoes;


/*Para alterar uma Stored Procedure é necessária apagá-la e criá-la novamente*/
DROP PROCEDURE
CREATE PROCEDURE


/*Como declarar uma variável em Procedures*/
/*Tipos: */
VARCHAR(n)
INTEGER
DECIMAL(p, s) p dígitos e s pontos decimais
DATE
TIMESTAMP data e hora


/*Exemplo de declaração de variáveis: */
DELIMITER //
CREATE PROCEDURE  `exibe_variavel`()
BEGIN
DECLARE texto char(12) default 'Olá Mundo!' //
SELECT texto//
END //
DELIMITER;

CALL exibe_variavel;


DELIMITER //
CREATE PROCEDURE  `tipos_dados`()
BEGIN
DECLARE v varchar(5) default 'Texto' //
DECLARE i integer default 10 //
DECLARE d decimal(4,2) default 56.12 //
DECLARE dt date default '2023-03-01' //
SELECT v //
SELECT i //
SELECT d //
SELECT dt //
END //
DELIMITER;

CALL tipos_dados; 



DELIMITER //
CREATE PROCEDURE  `atribui_valor`()
BEGIN
DECLARE texto varchar(30) default 'Texto Inicial' //
SELECT texto //
SET texto = 'Texto Modificado' //
SELECT texto //

END //
DELIMITER;

CALL atribui_valor; 


/*Procedures com parâmetros*/
DELIMITER //
CREATE PROCEDURE `inclui_produto` (
vCodigo varchar (50),
vNome varchar (50), 
vSabor varchar(50), 
vTamanho varchar (50), 
vEmbalagem varchar(50), 
vPreco decimal(10,2))
BEGIN
INSERT INTO tabela_de_produtos
(CODIGO_DO_PRODUTO, NOME_DO_PRODUTO, SABOR, TAMANHO, EMBALAGEM, PRECO_DE_LISTA)
VALUES ( vCodigo, vNome, vSabor, vTamanho, vEmbalagem, vPreco) //
END //
DELIMITER; 

CALL inclui_produto ('4000001', 'Sabor do Pantanal', 'Melancia', '1L', 'Pet', 4.79);
SELECT * FROM tabela_de_produtos WHERE CODIGO_DO_PRODUTO = '4000001';


/*Stored Procedure que retorna o sabor de um produto*/
SELECT SABOR FROM tabela_de_produtos WHERE CODIGO_DO_PRODUTO = '4000001';

DELIMITER //
CREATE PROCEDURE `acha_sabor` (vProduto varchar(50))
BEGIN
DECLARE vSabor varchar(50)//
SELECT SABOR INTO vSabor FROM tabela_de_produtos WHERE CODIGO_DO_PRODUTO = vProduto;
SELECT vSabor //
END //
DELIMITER

CALL acha_sabor('4000001');


/*    CURSOR    */
-- Trata-se de uma estrutura de array no SQL que recebe o resultado de uma consulta

DECLARE @NOME varchar(10);         --Declara uma variável
DECLARE CURSOR_NOME CURSOR FOR     --Declara um cursor para um select
  SELECT NOME FROM TABELA;         --Faz um select que retorna mais de uma linha
OPEN CURSOR_NOME;                  --Abre o cursos
FETCH CURSOR_NOME INTO @NOME;      --Pega o elemento da posição do cursor e joga numa variável, faz 1x pra cada variável

/*Exemplo: */
CREATE PROCEDURE 'cursor_primeiro_contato'()
BEGIN
  DECLARE vNome varchar(50);
  DECLARE c CURSOR FOR 
    SELECT NOME FROM TABELA_DE_CLIENTES LIMIT 4;
  OPEN c;
  FETCH c INTO vNome;
  SELECT vNome;
  FETCH c INTO vNome;
  SELECT vNome;
  FETCH c INTO vNome;
  SELECT vNome;
  FETCH c INTO vNome;
  SELECT vNome;
END
CALL cursor_primeiro_contato;

/*Iterando sobre um cursor sem ter que repetir o Fetch*/
CREATE PROCEDURE 'cursor_looping'()
BEGIN
  DECLARE fim_cursor INT DEFAULT 0;
  DECLARE vNome VARCHAR(50);
  DECLARE c CURSOR FOR 
    SELECT NOME FROM TABELA DE CLIENTES LIMIT 4; 
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fim_do_cursor = 1; --aqui trata um erro, quando der erro a variavel fim_cursor será 1
  OPEN c;
  WHILE fim_cursor = 0
  DO
    FETCH c INTO vNome;
    SELECT vNome;
  END WHILE
  CLOSE c;
END


